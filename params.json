{"name":"Flymake-python","body":"# flymake-python: highlight Python syntax, style and unit test errors in\r\nEmacs\r\n\r\nThis project includes tools for enabling Emacs to run external Python\r\nlint and unit testing tools in the background while editing and\r\nhighlighting the results in the source code.\r\n\r\n## Features\r\n\r\nThe following external tools are supported:\r\n\r\n-   pep8.py\r\n-   PyChecker\r\n-   PyLint\r\n-   PyFlakes\r\n-   nose\r\n\r\nPython virtual environments are supported, but this is largely untested.\r\n\r\n## Components\r\n\r\n`pyflymake.py`:\r\n  ~ a script which runs external tools according to user's configuration\r\n    and parses the output for `flymake.el`. The script is based on code\r\n    copied from the Emacs Wiki on 2010-02-25. The original author is\r\n    unknown.\r\n\r\n`flymake.el`:\r\n  ~ a modified version of Pavel Kabyakov's `flymake.el` 0.3 which adds\r\n    support for\r\n\r\n    -   the 'info' message type in addition to 'error' and 'warning'\r\n    -   passing the reason for running to external tools\r\n\r\n`.emacs` customization:\r\n  ~ in addition, a snippet of Emacs Lisp is needed in your `~/.emacs`\r\n    file\r\n\r\n## Installation\r\n\r\n### Prerequisites\r\n\r\nInstall or make sure you have installed:\r\n\r\n-   Emacs (tested on 23.1.50.1)\r\n-   Python (tested on 2.6.4)\r\n-   the following Python packages:\r\n\r\n    -   pep8\r\n    -   pychecker\r\n    -   pylint\r\n    -   nose\r\n    -   nose\\_machineout (from\r\n        [http://bitbucket.org/akaihola/nose\\_machineout/)](http://bitbucket.org/akaihola/nose_machineout/))\r\n\r\n### Files to install\r\n\r\nMake sure that `pep8`, `pylint` and `pychecker` are in your $PATH.\r\n\r\nChoose a directory for `pyflymake.py` (e.g. `~/.emacs.d/`) and copy it\r\nthere. Make sure the script is set as executable.\r\n\r\nCopy the provided version of `flymake.el` in a directory which is in the\r\nEmacs `load-path`. If another version of flymake is installed, make sure\r\nthis directory precedes it. Example: copy to `~/.emacs.d/flymake.el` and\r\nadd this to your `~/.emacs` [file::](file::)\r\n\r\n> (add-to-list 'load-path \"\\~/.emacs.d\")\r\n\r\n### Emacs configuration\r\n\r\nAdd to your `~/.emacs` file (customize paths if necessary):\r\n\r\n    (add-to-list 'load-path \"~/.emacs.d\") ;; check path\r\n\r\n    (when (load \"flymake\" t)\r\n      (defun flymake-pylint-init ()\r\n        (let* ((temp-file (flymake-init-create-temp-buffer-copy\r\n                           'flymake-create-temp-inplace))\r\n               (local-file (file-relative-name\r\n                            temp-file\r\n                            (file-name-directory buffer-file-name))))\r\n          (list \"~/.emacs.d/pyflymake.py\" (list local-file))))\r\n      ;;     check path\r\n\r\n      (add-to-list 'flymake-allowed-file-name-masks\r\n           '(\"\\\\.py\\\\'\" flymake-pylint-init)))\r\n\r\nIf you'd like flymake to be activated automatically, add the following\r\nto `~/.emacs` as well:\r\n\r\n    (add-hook 'find-file-hook 'flymake-find-file-hook)\r\n\r\n## Configuration\r\n\r\nBy default, `pyflymake.py` only runs PyLint, Pep8 and PyFlakes.\r\nPyChecker and unit test runners can be enabled in the configuration.\r\n\r\nTo find the configuration, `pyflymake.py` looks for `.pyflymakerc` in\r\nthe same directory as the file being checked. If it isn't found, parent\r\ndirectories are checked up until the root directory. If no configuration\r\nfile is found, the default configuration is used.\r\n\r\nThe `.pyflymakerc` configuration file is imported by `pyflymake.py` as a\r\nPython module. The `TRIGGER_TYPE` global variable is set and contains a\r\nstring indicating the reason why flymake is running the checks.\r\n\r\n### List of configuration options\r\n\r\n`VIRTUALENV` (default: `None`)\r\n  ~ the Python virtual environment to use when running check tools\r\n\r\n`TEST_RUNNER_COMMAND` (default: `None`)\r\n  ~ the unit test runner command or `None` if no unit tests should be\r\n    run\r\n\r\n`TEST_RUNNER_FLAGS` (default: `[]`)\r\n  ~ the list of command line arguments for the unit test runner\r\n\r\n`TEST_RUNNER_OUTPUT` (default: `'stderr'`)\r\n  ~ the device on which messages are output by the test runner\r\n\r\n`ENV` (default: `{}`)\r\n  ~ additional environment variables when running check tools\r\n\r\n`PYLINT` (default: `True`)\r\n  ~ enable PyLint\r\n\r\n`PYCHECKER` (default: `False`)\r\n  ~ enable PyChecker\r\n\r\n`PEP8` (default: `True`)\r\n  ~ enable Pep8\r\n\r\n`PYFLAKES` (default: `True`)\r\n  ~ enable PyFlakes\r\n\r\n`IGNORE_CODES` (default: `(`))\r\n  ~ error codes to ignore (in addition to sane defaults)\r\n\r\n`USE_SANE_DEFAULTS` (default: `True`)\r\n  ~ ignore the following error codes in PyLint:\r\n\r\n    -   `C0103` Naming convention\r\n    -   `C0111` Missing Docstring\r\n    -   `E1002` Use super on old-style class\r\n    -   `W0232` No `__init__`\r\n    -   `R0904` Too many public methods\r\n    -   `R0903` Too few public methods\r\n    -   `R0201` Method could be a function\r\n\r\n### Enabling a unit test runner\r\n\r\nIn the root of a source tree in which you want pyflymake to run tests,\r\ncreate the file `.pyflymakerc` with the following content:\r\n\r\n    # to run external tools in a virtualenv:\r\n    VIRTUALENV = '/home/me/.virtualenvs/thevirtualenv'\r\n\r\n    # to run unit tests with nose:\r\n    TEST_RUNNER_COMMAND = 'nosetests'\r\n    TEST_RUNNER_FLAGS = [\r\n        '--verbosity=0',\r\n        '--with-machineout',\r\n        '--machine-output']\r\n\r\n    # to enable additional checks:\r\n    PYCHECKER = True\r\n\r\nYou can use different test runners, too, provided that their output is\r\nsimilar to nose\\_machineout's. For example, Django's test runner could\r\nbe used if django-nose is installed:\r\n\r\n    TEST_RUNNER_COMMAND = '/home/me/project/manage.py'\r\n    TEST_RUNNER_FLAGS = [\r\n        'test',\r\n        '--settings=test_settings',\r\n        '--failfast',\r\n        '--verbosity=0',\r\n        '--with-machineout',\r\n        '--machine-output']\r\n\r\n### Trigger type specific configuration\r\n\r\nYou can specify custom configurations depending on why the checks are\r\nbeing run. Different triggers for `flymake.el` to run the checks are:\r\n\r\n-   `open`: `flymake.el` was activated for the buffer\r\n-   `edit`: the buffer was edited more than .5 seconds ago\r\n-   `save`: the buffer was saved\r\n-   `force`: `M-x flymake-start-syntax-check` was executed manually\r\n\r\nHere's an example configuration:\r\n\r\n    # run unit tests only when checks are forced or buffer saved\r\n    if TRIGGER_TYPE in ('save', 'force'):\r\n        TEST_RUNNER_COMMAND = 'nosetests'\r\n        TEST_RUNNER_FLAGS = [\r\n            '--verbosity=0',\r\n            '--with-machineout',\r\n            '--machine-output']\r\n\r\n    # run unit tests only up to the first failure when buffer is saved\r\n    if TRIGGER_TYPE == 'save':\r\n        TEST_RUNNER_FLAGS.append('-x')\r\n\r\n    # run PyLint on open, save and forced-checks\r\n    PYLINT = TRIGGER_TYPE != 'edit'\r\n\r\n    # don't ignore any messages when a check was forced\r\n    if TRIGGER_TYPE == 'force':\r\n        USE_SANE_DEFAULTS = False\r\n        IGNORE_CODES = ()","tagline":"Highlight Python syntax, style and unit test errors in Emacs","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}